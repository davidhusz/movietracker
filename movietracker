#!/usr/bin/env bash

# TODO:
# Use agrep instead of grep
# Extract only the movie title from reddit post title
# Search files concurrently
# For README:
# Add example output
# Add cronjob example
# Document exit codes
# List dependencies
# Add license

set -euo pipefail     # strict mode
IFS=$'\n\t'
cd "$(dirname "$0")"  # execute in script directory

source config
for var in watchlist user_agent; do
	if [ -z "${!var:-}" ]; then
		echo "Error: config variable \$$var is not defined" >> /dev/stderr
		exit 2
	fi
done

log () {
	echo "[$(date)] $*" >> "${logfile:-log}"
}

main () {
	fetch_url="https://api.reddit.com/r/fullmoviesonyoutube/new"
	test -f lastchecked && fetch_url="${fetch_url}?before=$(< lastchecked)"
	log "Request $fetch_url"
	curl -fsSL -H "User-Agent: $user_agent" "$fetch_url" > newposts
	
	log "Parse results"
	true > matches  # empty the previous matchlist
	cat newposts |
		jq -rc '.data.children[].data |
			"\(.title)\t\(.url)\thttps://reddit.com\(.permalink)"' |
			while read -r title url thread; do
				cat "$watchlist" | while read -r film; do
					if grep -iwq "$film" <<< "$title"; then
						log "Match: '$film' -> '$title'"
						echo -e "$film\t$title\t$url\t$thread" >> matches
					fi
				done
			done
	
	if [ -s matches ]; then
		if [ ! -z "${onmatch:-}" ]; then
			eval "$onmatch"
		else
			./formatmatches pretty
		fi
	else
		log "No matches."
		rm matches
		eval "${onnomatch:-true}"
	fi
	
	lastchecked=$(jq -r '.data.children[0].data.name' newposts)
	if [ "$lastchecked" != "null" ]; then
		echo "$lastchecked" > lastchecked
	fi
	log "ID of last checked post: $(< lastchecked)"
	log "Script finished successfully."
}

cleanup () {
	log "Script encountered an error and exited with exit code $?." \
		"$(sed 's/^/\t/' error)"  # display indented error message
	rm error
	eval "${onerror:-exit 1}"
}

trap cleanup ERR
# Subshell is required for errexit to work properly inside the main function
(main) 2> error
rm error
